{"version":3,"file":"js/main.e219d082e92070c75f81.js","mappings":"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","sources":["webpack://firebase/./src/js/index.js"],"sourcesContent":["// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nimport { initializeApp } from 'firebase/app'\r\nimport {\r\n    getFirestore, collection, onSnapshot,\r\n    addDoc, deleteDoc, doc, getDocs, updateDoc, getDoc\r\n} from 'firebase/firestore'\r\nimport { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut } from 'firebase/auth'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"your-api-key\",\r\n    authDomain: \"your-auth-domain\",\r\n    projectId: \"your-project-id\",\r\n    storageBucket: \"your-storage-bucket\",\r\n    messagingSenderId: \"your-messaging-sender-id\",\r\n    appId: \"your-app-id\"\r\n}\r\n\r\n//init firebase app\r\nconst app = initializeApp(firebaseConfig)\r\nconst auth = getAuth(app)\r\nconst db = getFirestore(app)\r\n\r\n//init services\r\nconst colRef = collection(db, 'books')\r\n\r\n//real-collection data\r\nonSnapshot(colRef , (snapshot) => {\r\n    let books = []\r\n    snapshot.docs.forEach((doc) => {\r\n        books.push({...doc.data(),id: doc.id})\r\n    })\r\n    console.log(books)\r\n})\r\n\r\n//adding docs\r\nconst addBookForm = document.querySelector('.add')\r\naddBookForm.addEventListener('submit', (e) => {\r\n    e.preventDefault()    //in an html page , default action is that whn a sub,it button is hit , the page is refreshed , we want to avoid it , hence this is used\r\n    addDoc(colRef, {\r\n        title: addBookForm.title.value,  //here, addBookForm object calls the 'name' of the html file 'adddocs' section\r\n        author: addBookForm.author.value,\r\n    })\r\n    .then(() => {\r\n        addBookForm.reset()\r\n    })\r\n})\r\n\r\n//deleting docs\r\nconst deleteBookForm = document.querySelector('.delete')\r\ndeleteBookForm.addEventListener('submit', (e) => {\r\n    e.preventDefault()\r\n\r\n    const docRef = doc(db,'books',deleteBookForm.id.value)\r\n    deleteDoc(docRef)\r\n       .then(() => {\r\n        deleteBookForm.reset()\r\n       })\r\n})\r\n\r\n// DOM Elements\r\nconst loginBtn = document.getElementById('loginBtn')\r\nconst signUpBtn = document.getElementById('signUpBtn')\r\nconst cartBtn = document.getElementById('cartBtn')\r\nconst profileBtn = document.getElementById('profileBtn')\r\nconst schedulePickupBtn = document.getElementById('schedulePickupBtn')\r\nconst buyItemsBtn = document.getElementById('buyItemsBtn')\r\nconst applyJobBtn = document.getElementById('applyJobBtn')\r\nconst trackPickupBtn = document.getElementById('trackPickupBtn')\r\nconst csrCertificateBtn = document.getElementById('csrCertificateBtn')\r\nconst contactUsBtn = document.getElementById('contactUsBtn')\r\n\r\n// Image Slider\r\nlet currentSlide = 0\r\nconst slides = document.querySelectorAll('.slide')\r\n\r\nfunction nextSlide() {\r\n    slides[currentSlide].classList.remove('active')\r\n    currentSlide = (currentSlide + 1) % slides.length\r\n    slides[currentSlide].classList.add('active')\r\n}\r\n\r\nsetInterval(nextSlide, 2000)\r\n\r\n// Modal Functions\r\nfunction showModal(modalId) {\r\n    const modal = document.getElementById(modalId)\r\n    modal.classList.add('active')\r\n}\r\n\r\nfunction hideModal(modalId) {\r\n    const modal = document.getElementById(modalId)\r\n    modal.classList.remove('active')\r\n}\r\n\r\n// Event Listeners\r\nloginBtn.addEventListener('click', () => showModal('loginModal'))\r\nsignUpBtn.addEventListener('click', () => showModal('signUpModal'))\r\ncartBtn.addEventListener('click', () => showModal('cartModal'))\r\nprofileBtn.addEventListener('click', () => showModal('profileModal'))\r\nschedulePickupBtn.addEventListener('click', () => showModal('pickupFormModal'))\r\nbuyItemsBtn.addEventListener('click', () => showModal('buyItemsModal'))\r\napplyJobBtn.addEventListener('click', () => showModal('applyJobModal'))\r\ntrackPickupBtn.addEventListener('click', () => showModal('trackPickupModal'))\r\ncsrCertificateBtn.addEventListener('click', () => showModal('csrCertificateModal'))\r\ncontactUsBtn.addEventListener('click', () => showModal('contactUsModal'))\r\n\r\n// Close modal buttons\r\ndocument.querySelectorAll('.close-modal').forEach(button => {\r\n    button.addEventListener('click', () => {\r\n        const modal = button.closest('.modal')\r\n        modal.classList.remove('active')\r\n    })\r\n})\r\n\r\n// Sign Up Functionality\r\nasync function handleSignUp(email, password, userType) {\r\n    try {\r\n        const userCredential = await createUserWithEmailAndPassword(auth, email, password)\r\n        const user = userCredential.user\r\n        \r\n        // Add user details to Firestore\r\n        await addDoc(collection(db, 'users'), {\r\n            uid: user.uid,\r\n            email: user.email,\r\n            userType: userType,\r\n            createdAt: new Date()\r\n        })\r\n\r\n        alert('Sign up successful!')\r\n        hideModal('signUpModal')\r\n    } catch (error) {\r\n        alert(error.message)\r\n    }\r\n}\r\n\r\n// Login Functionality\r\nasync function handleLogin(email, password) {\r\n    try {\r\n        await signInWithEmailAndPassword(auth, email, password)\r\n        alert('Login successful!')\r\n        hideModal('loginModal')\r\n    } catch (error) {\r\n        alert(error.message)\r\n    }\r\n}\r\n\r\n// Pickup Form Steps\r\nlet currentStep = 1\r\nconst totalSteps = 5\r\n\r\nfunction updateProgressBar() {\r\n    const progress = (currentStep / totalSteps) * 100\r\n    document.querySelector('.progress').style.width = `${progress}%`\r\n}\r\n\r\nfunction nextStep() {\r\n    if (currentStep < totalSteps) {\r\n        currentStep++\r\n        updateProgressBar()\r\n        showStep(currentStep)\r\n    }\r\n}\r\n\r\nfunction previousStep() {\r\n    if (currentStep > 1) {\r\n        currentStep--\r\n        updateProgressBar()\r\n        showStep(currentStep)\r\n    }\r\n}\r\n\r\n// Pickup Form Data\r\nlet pickupData = {\r\n    userType: '',\r\n    items: [],\r\n    address: '',\r\n    date: '',\r\n    time: '',\r\n    csrCertificate: false\r\n}\r\n\r\n// Save pickup data\r\nasync function savePickupData() {\r\n    try {\r\n        const user = auth.currentUser\r\n        if (!user) {\r\n            alert('Please login first')\r\n            return\r\n        }\r\n\r\n        await addDoc(collection(db, 'pickups'), {\r\n            ...pickupData,\r\n            userId: user.uid,\r\n            status: 'pending',\r\n            createdAt: new Date()\r\n        })\r\n\r\n        alert('Pickup scheduled successfully!')\r\n        hideModal('pickupFormModal')\r\n    } catch (error) {\r\n        alert(error.message)\r\n    }\r\n}\r\n\r\n// Cart Functionality\r\nlet cart = []\r\n\r\nfunction addToCart(item) {\r\n    cart.push(item)\r\n    updateCartDisplay()\r\n}\r\n\r\nfunction removeFromCart(index) {\r\n    cart.splice(index, 1)\r\n    updateCartDisplay()\r\n}\r\n\r\nfunction updateCartDisplay() {\r\n    const cartContent = document.querySelector('#cartModal .modal-content')\r\n    cartContent.innerHTML = `\r\n        <h2>Your Cart</h2>\r\n        <div class=\"cart-items\">\r\n            ${cart.map((item, index) => `\r\n                <div class=\"cart-item\">\r\n                    <img src=\"${item.image}\" alt=\"${item.name}\">\r\n                    <div class=\"item-details\">\r\n                        <h3>${item.name}</h3>\r\n                        <p>${item.price}</p>\r\n                    </div>\r\n                    <button onclick=\"removeFromCart(${index})\">Remove</button>\r\n                </div>\r\n            `).join('')}\r\n        </div>\r\n    `\r\n}\r\n\r\n// Job Application\r\nasync function submitJobApplication(applicationData) {\r\n    try {\r\n        await addDoc(collection(db, 'jobApplications'), {\r\n            ...applicationData,\r\n            status: 'pending',\r\n            createdAt: new Date()\r\n        })\r\n        alert('Application submitted successfully!')\r\n        hideModal('applyJobModal')\r\n    } catch (error) {\r\n        alert(error.message)\r\n    }\r\n}\r\n\r\n// Contact Form\r\ndocument.getElementById('contactForm').addEventListener('submit', async (e) => {\r\n    e.preventDefault()\r\n    const formData = new FormData(e.target)\r\n    const messageData = {\r\n        name: formData.get('name'),\r\n        email: formData.get('email'),\r\n        message: formData.get('message'),\r\n        createdAt: new Date()\r\n    }\r\n\r\n    try {\r\n        await addDoc(collection(db, 'messages'), messageData)\r\n        alert('Message sent successfully!')\r\n        e.target.reset()\r\n    } catch (error) {\r\n        alert(error.message)\r\n    }\r\n})\r\n\r\n// Track Pickup Status\r\nasync function trackPickup(pickupId) {\r\n    try {\r\n        const pickupDoc = await getDoc(doc(db, 'pickups', pickupId))\r\n        if (pickupDoc.exists()) {\r\n            const pickupData = pickupDoc.data()\r\n            showPickupStatus(pickupData)\r\n        } else {\r\n            alert('Pickup not found')\r\n        }\r\n    } catch (error) {\r\n        alert(error.message)\r\n    }\r\n}\r\n\r\n// CSR Certificate Generation\r\nasync function generateCSRCertificate(pickupId) {\r\n    try {\r\n        const pickupDoc = await getDoc(doc(db, 'pickups', pickupId))\r\n        if (pickupDoc.exists()) {\r\n            const pickupData = pickupDoc.data()\r\n            // Generate certificate logic here\r\n            alert('CSR Certificate generated successfully!')\r\n        }\r\n    } catch (error) {\r\n        alert(error.message)\r\n    }\r\n}\r\n\r\n// Initialize the application\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    // Check authentication state\r\n    auth.onAuthStateChanged((user) => {\r\n        if (user) {\r\n            // User is signed in\r\n            loginBtn.style.display = 'none'\r\n            signUpBtn.style.display = 'none'\r\n            profileBtn.style.display = 'block'\r\n        } else {\r\n            // User is signed out\r\n            loginBtn.style.display = 'block'\r\n            signUpBtn.style.display = 'block'\r\n            profileBtn.style.display = 'none'\r\n        }\r\n    })\r\n})"],"names":["app","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","db","colRef","snapshot","books","docs","forEach","doc","push","data","id","console","log","addBookForm","document","querySelector","addEventListener","e","preventDefault","title","value","author","then","reset","deleteBookForm","docRef","loginBtn","getElementById","signUpBtn","cartBtn","profileBtn","schedulePickupBtn","buyItemsBtn","applyJobBtn","trackPickupBtn","csrCertificateBtn","contactUsBtn","currentSlide","slides","querySelectorAll","showModal","modalId","classList","add","setInterval","remove","length","button","closest","async","formData","FormData","target","messageData","name","get","email","message","createdAt","Date","alert","error","onAuthStateChanged","user","style","display"],"sourceRoot":""}